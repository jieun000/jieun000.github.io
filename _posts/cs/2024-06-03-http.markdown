---
layout: post
title: HyperText Transfer Protocol(HTTP)
image: 202406/http.jpeg
date: 2024-06-03 12:00:00 +1000
categories: cs
tags: [http, hypertext_transfer_protocol]
toc: true
---
## HTTP
HTTP(hypertext transfer protocol)은 <mark>웹 서버와 클라이언트 간의 통신을 담당</mark>하며, 웹 페이지들 사이에서 링크를 통해 정보를 전송하는 통신 규약(protocol)입니다.

<br>

### HTTP의 특징
1. 클라이언트-서버 모델 <br>
HTTP는 클라이언트와 서버 간의 요청과 응답을 기반으로 작동합니다. 클라이언트(일반적으로 웹 브라우저)는 서버에 특정 리소스를 요청하고, 서버는 해당 요청에 대한 응답을 반환합니다.

2. 상태가 없는 프로토콜 <br>
HTTP는 상태가 없는(stateless) 프로토콜입니다. 이는 각 요청이 독립적으로 처리되며, <u>이전 HTTP 요청과 다음 HTTP 요청 간에 연결이 유지되지 않음</u>을 의미합니다. 서버는 각 요청을 별도로 처리하며, 클라이언트의 상태를 유지하지 않습니다. 이를 통해 HTTP는 단순하고 확장성이 뛰어나지만, 상태를 유지해야 하는 애플리케이션에서는 추가적인 관리가 필요합니다.

3. URI와 URL <br>
HTTP는 <u>리소스를 식별하기 위해 URI와 URL을 사용</u>합니다. 
URI(Uniform Resource Identifier)는 리소스를 식별하는 일반적인 방법을 제공하며, URL(Uniform Resource Locator)과 URN(Uniform Resource Name)을 포함하는 상위 개념입니다. 
URL은 특정 리소스의 위치를 나타내며, 예를 들어 웹 주소에서 리소스를 찾는 데 사용됩니다. 
URL은 스킴(sheme)을 통해 어떤 방법으로, 어디(host, port, url-path)를 통해 자원을 가져와야 하는지를 나타냅니다. 
반면, URN은 고유한 리소스 자체를 표현합니다. URN을 URL로 변환시키는 작업이 필요할 때도 있습니다. 

4. 요청과 응답 구조 <br>
HTTP 통신은 <u>요청(request)과 응답(response)으로 구성</u>됩니다. 클라이언트는 서버에 요청 메시지를 보내고, 서버는 이에 대한 응답 메시지를 반환합니다. 각 메시지는 *헤더(header)와 본문(body)으로 구성*됩니다. 헤더는 메타데이터를 포함하며, 본문은 실제 데이터를 포함합니다.
> Transaction(트랙잭션): 쪼갤 수 없는 업무 처리의 최소 단위

**HTTP Transaction(트랜잭션)은 HTTP 요청과 이에 대한 응답**으로 구성됩니다. 이러한 트랜잭션을 통해 클라이언트와 서버 간에 데이터를 주고받습니다.

| 트랜잭션 탭 | 역할 |
|:---|---|
| Headers | 요청 또는 응답의 메타데이터. 예: 콘텐츠 유형, 길이, 쿠키 등. |
| Payload | 실제 전송되는 데이터. 요청의 본문 또는 응답의 본문. |
| Preview | 전송된 데이터의 미리보기 |
| Response | 서버가 클라이언트의 요청에 대해 반환한 응답 내용을 포함. |
| Initiator | 요청을 트리거한 원인(스크립트, 사용자 액션 등). |
| Timing | 요청과 응답에 걸린 시간과 각 단계의 소요 시간 |
| Cookies| 서버와 클라이언트 간에 교환된 쿠키 정보 |

<br>

#### 5. HTTP 요청 메서드
HTTP는 다양한 요청 메서드를 제공합니다. 각 메서드는 특정 작업을 수행하는 데 사용됩니다. <br> 
주요 HTTP 메서드는 다음과 같습니다:

| 메서드 | 역할 |
|:---|---|
| GET | 특정 리소스에 대한 조회를 요청 |
| HEAD | GET 요청과 동일하지만, 응답 헤더 부분만 포함(본문을 미포함) |
| POST | 요청 바디에 있는 내용으로 새로운 리소스 생성을 요청 | 
| PUT | 기존에 있던 리소스를 요청 바디에 있는 내용으로 변경 |
| PATCH | 리소스의 부분적인 업데이트를 수행 |
| DELETE | 서버에서 리소스를 삭제 |
| OPTIONS | 서버에 요청할 수 있는 메서드를 반환 |

→ **CURD**(Create, Read, Update, Delete)별 적절한 메서드 <br>
읽기(GET), 생성하기(POST), 수정하기(PUT, PATCH), 삭제하기(DELETE)

- 안전한 메서드: 서버의 상태를 변경하지 않는 메서드를 의미합니다. <br>
예: GET
- 멱등성 있는 메서드: 여러 번 실행해도 동일한 결과를 얻을 수 있는 메서드입니다. <br>
예: GET, PUT, DELETE ~~POST·PATCH~~

<br>

#### 6. HTTP 응답 코드의 대역별 의미

| 상태 코드 | 의미 | |
|:---|:---|:---|
| 1.xx | 정보 | 요청을 받았으며 처리가 계속 진행됨 |
| 2.xx | 성공 | 요청을 성공적으로 수신/이해/수락함 |
| 3.xx | 리다이렉트 | 클라이언트는 요청을 완료하기 위해 추가 작업을 수행해야 함 |
| 4.xx | 클라이언트 오류 | 요청에 오류가 있어 서버가 요청을 처리할 수 없음 |
| 5.xx | 서버 오류 | 서버가 요청을 처리하는 중에 오류가 발생함 |

<table>
    <tr>
        <th rowspan="2">2.xx</th>
        <td>200</td><td>OK</td>
        <th rowspan="10">4.xx</th>
        <td>400</td><td>Bad Request</td>
    </tr>
    <tr>
        <td>201</td><td>Created</td>
        <td>401</td><td>Unauthorized</td>
    </tr>
    <tr>
        <th rowspan="4">3.xx</th>
        <td>301</td><td>Moved Permanently</td>
        <td>403</td><td>Forbidden</td>
    </tr>
    <tr>
        <td>304</td><td>Not Modified</td>
        <td>404</td><td>Not Found</td>
    </tr>
    <tr>
        <td>307</td><td>Temporary Redirect</td>
        <td>405</td><td>Method Not Allowed</td>
    </tr>
    <tr>
        <td>308</td><td>Permanect Redirect</td>
        <td>406</td><td>Not Acceptable</td>
    </tr>
    <tr>
        <th rowspan="4">5.xx</th>
        <td>500</td><td>Internal Server Error</td>
        <td>413</td><td>Content Too Large</td>
    </tr>
    <tr><td>502</td><td>Bad Gateway</td>
        <td>429</td><td>Too Many Requests</td>
    </tr>
    <tr><td>503</td><td>Service Unavailable</td></tr>
    <tr><td>504</td><td>Gateway Timeout</td></tr>
</table>

<br>

### HTTP/version
HTTP는 여러 버전으로 발전해 왔으며, 각 버전마다 성능과 기능이 개선되었습니다.


#### HTTP/1.1
HTTP/1.1은 <u>현재 널리 사용되는 HTTP 버전</u>으로, 성능을 개선하기 위해 지속 연결(persistent connection)과 파이프라이닝(pipelining) 기능을 추가했습니다. **지속 연결**은 클라이언트와 서버 간의 연결을 유지함으로써 여러 요청과 응답을 하나의 연결에서 처리할 수 있게 하여 연결 설정에 소요되는 연결을 다시 설정하는 데 드는 시간(오버헤드)를 줄입니다. **파이프라이닝**은 클라이언트가 다음 요청을 서버로부터 응답을 받기 전에 전송할 수 있게 함으로써 대기 시간을 감소시킵니다. HTTP/1.1은 클라이언트의 요청으로 트랜잭션이 시작되며, 각각의 요청과 응답이 독립적으로 처리되는 상태가 없는(stateless) 프로토콜입니다. 이는 클라이언트와 서버가 각 요청마다 이전 요청의 상태를 기억할 필요가 없음을 의미합니다. 또한 HTTP/1.1은 **비연결성**(connectionless)을 특징으로 하여, 기본적으로 각 요청마다 새로운 연결을 설정하지만, 지속 연결을 통해 이러한 비연결성을 극복하고 있습니다. 이러한 기능들은 웹의 성능을 크게 향상시켰고, HTTP/1.1을 현재 가장 널리 사용되는 HTTP 버전으로 만들었습니다.

#### HTTP/2
HTTP/2는 HTTP/1.1의 성능을 개선한 버전입니다. 주요 개선 사항으로는 다중화(multiplexing), 헤더 압축(header compression), 서버 푸시(server push), 그리고 연결 최적화(connection optimization)가 있습니다. 이를 통해 웹 페이지 로딩 속도가 크게 개선되었습니다. HTTP/2는 이러한 기능들을 통해 웹 페이지의 로딩 속도를 빠르게 하고, 데이터 전송 효율을 높여 사용자 경험을 향상시킵니다. 이 프로토콜은 HTTP/1.1과 호환되며, 모던 웹 애플리케이션과 서비스에서 널리 채택되고 있습니다.

#### HTTP/3
HTTP/3는 HTTP의 최신 버전으로, 기존의 TCP 대신에 <u>QUIC(Quick *UDP* Internet Connections) 프로토콜</u>을 기반으로 합니다. TCP는 신뢰성 있는 데이터 전송을 위해 여러 가지 필드를 가지고 있습니다(순서 번호, 확인 응답 번호, 윈도우 크기, 플래그 등). 이에 반해 UDP는 간단한 데이터 전송을 위한 프로토콜로, 헤더에는 출발지 포트, 목적지 포트, 데이터의 길이, 그리고 체크섬 필드만을 포함합니다. TCP와 달리 UDP는 연결 설정을 위한 핸드쉐이킹 과정이 없어 연결 수립 시간을 단축하며, 이로 인해 TCP보다 더 낮은 오버헤드와 빠른 전송 속도를 제공합니다. QUIC은 UDP 기반으로 구현되어 TCP의 제약을 극복하고, 패킷 레벨에서 헤더 압축을 지원하여 데이터 전송 효율을 높입니다. 이러한 특성은 특히 모바일 환경이나 불안정한 네트워크 상황에서도 안정적인 성능을 제공하는 데 기여합니다. HTTP/3은 이러한 기술적 특징들을 통해 웹 페이지의 로딩 속도를 개선하고 사용자 경험을 향상시키는 데 중점을 두고 개발되었습니다.