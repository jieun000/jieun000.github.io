---
layout: post
title: Architecture(아키텍처)
image: 202406/achitecture.jpeg
date: 2024-06-04 12:00:00 +1000
categories: cs
tags: [achitecture, 아키텍처]
toc: true
---
## 아키텍처
아키텍처는 <mark>소프트웨어 시스템을 설계하고 구성하는 방식</mark>을 의미하며, **시스템의 구조와 동작 방식을 결정**짓습니다. 
다양한 아키텍처 접근 방식이 존재하며, 각각의 방식은 특정한 상황이나 요구사항을 해결하기 위해 선택합니다.
> 아키텍트: 계획을 작성하는 사람

<br>

---
<br>

## 소프트웨어 아키텍처 패턴

<br>

### 계층형 아키텍처
계층형 아키텍처(layered architecture)는 <mark>시스템을 다양한 수준의 계층으로 나누어 각 계층이 특정한 역할을 수행하도록 설계하는 방식</mark>입니다. 이 아키텍처는 가장 흔하게 사용되는 구조로, 단순하고 이해하기 쉬워 <u>소규모 애플리케이션</u>에서 많이 활용됩니다. 일반적으로 Presentation(표현), Application(응용), Business Logic(비즈니스 로직), Data Access(데이터 접근) 등의 계층으로 나뉘며, 각 계층이 논리적으로 분리되어 있습니다.

계층형 아키텍처의 장점은 다음과 같습니다. 각 계층이 명확하게 분리되어 있어 개발과 유지보수가 용이하며, 코드의 재사용성과 확장성을 높이는 데 기여합니다. 또한, 계층 내의 코드 응집도가 높아져 코드의 가독성과 관리가 쉬워지고, 복잡도가 감소하여 테스트도 용이해집니다.

그러나 계층형 아키텍처는 애플리케이션 규모가 커짐에 따라 단점이 드러날 수 있습니다. 규모가 큰 애플리케이션에서는 유지보수가 어려워지고, 성능 저하가 발생할 수 있습니다. 또한, 모든 계층을 거쳐야 하므로 속도가 떨어질 수 있으며, 배포 과정이 복잡해질 수 있습니다. 이러한 점을 고려하여, 계층형 아키텍처는 소규모 애플리케이션에 적합하지만, 대규모 시스템에서는 다른 아키텍처와의 조합이 필요할 수 있습니다.

<br>

### 이벤트 기반 아키텍처
이벤트 기반 아키텍처(event-driven architecture)는 시스템 내에서 <mark>발생하는 이벤트 상태 변화에 따라 작동하는 방식</mark>을 중심으로 설계됩니다. 이벤트는 주로 <u>비동기적으로 발생</u>하며, 각 이벤트는 이벤트 핸들러에 의해 처리됩니다. 이 아키텍처는 느슨하게 결합된 구성 요소로 시스템을 구성하여, 확장성과 유연성을 높이고 복잡한 비즈니스 로직을 처리하는 데 유리합니다.

이벤트 기반 아키텍처는 이벤트를 발생시키는 프로듀서(producer), 이벤트를 전달하는 브로커(broker), 그리고 이벤트를 받는 컨슈머(consumer)로 구성됩니다. 이 아키텍처의 장점 중 하나는 확장성이 뛰어나고, 아키텍처 내 컴포넌트 간 의존성을 줄일 수 있다는 점입니다. 이는 프로듀서, 브로커, 컨슈머 각각이 수평 확장(Scale out)하기 용이하기 때문입니다. 수평 확장은 컴퓨팅 장비(서버, 메모리, CPU, 네트워크 등)를 추가하여 시스템의 처리량을 늘리는 것을 의미합니다.

그러나 이벤트 기반 아키텍처는 비동기로 이벤트를 처리하기 때문에 이벤트 순서를 보장하기 어렵다는 단점이 있습니다. 또한, 에러가 발생했을 때 이벤트를 새로 받을지, 무시할지, 혹은 에러 처리를 어떻게 할지에 대해 고려해야 합니다. 이러한 점들을 적절히 처리하면 이벤트 기반 아키텍처는 높은 유연성과 확장성을 제공하여 복잡한 시스템을 효율적으로 관리할 수 있습니다.

<br>

### 마이크로서비스 아키텍처
마이크로서비스 아키텍처(microservices architecture)는 **서비스 지향 아키텍처(SOA)**의 한 형태로, <mark>여러 개의 작고 독립적인 서비스들로 복잡한 애플리케이션을 구성하는 방식</mark>입니다. 각 마이크로서비스는 특정 기능을 수행하며, 자체적으로 데이터를 관리하고 독립적으로 배포할 수 있습니다. 이러한 독립성 덕분에 각 서비스는 독립적으로 개발, 배포, 운영될 수 있으며, 서로 구조적으로 분리되어 있어 시스템 전체의 구조를 더욱 간결하게 유지할 수 있습니다.

마이크로서비스 아키텍처는 개발 속도를 높이고, 서비스 간의 느슨한 결합을 통해 유지보수성을 크게 개선합니다. 각 서비스는 독립적으로 업데이트 및 스케일링이 가능하여, 대규모 시스템을 구축하는 데 유리합니다. 

그러나 주의할 점도 있습니다. 너무 잘게 서비스를 쪼개는 것은 오히려 관리의 복잡성을 증가시킬 수 있습니다. 적절한 크기로 서비스를 분리하는 것이 중요하며, 각 서비스는 하나의 도메인을 담당하는 것이 바람직합니다. 또한, 트랜잭션을 처리할 때는 분산 트랜잭션을 고려해야 하므로 난이도가 높아질 수 있습니다. 각 서비스가 독립적으로 운영되기 때문에, 모든 서비스를 운영하는 구성을 갖추어야 하므로 유지보수 비용이 많이 들 수 있습니다.

이러한 특성들을 고려하여 마이크로서비스 아키텍처를 도입하면, 복잡한 시스템에서도 유연하고 효율적인 운영이 가능해집니다.

<hr>

각각의 아키텍처는 특정한 문제 해결을 위해 설계되었으며, **시스템의 규모, 성능 요구사항, 개발자 팀 구성 등을 고려하여 선택**해야 합니다.

<br>